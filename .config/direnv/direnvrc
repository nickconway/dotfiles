# Usage: use daemon <command> [...<args>]
#
# Starts the command in the background with an exclusive lock on $name.
#
# If no command is passed, it uses the name as the command.
#
# Logs are in .direnv/$name.log
#
# To kill the process, run `kill $(< .direnv/$name.pid)`.
use_daemon() {
  local cmd=$1
  local args="${@:2}"

  if [[ -n "$args" ]]; then
    cmd_string="$cmd $args"
  else
    cmd_string="$cmd"
  fi

  local pid_file=$(direnv_layout_dir)/$(echo $cmd_string | tr ' ' '-').pid
  local log_file=$(direnv_layout_dir)/$(echo $cmd_string | tr ' ' '-').log

  if ! has "$cmd"; then
    echo "ERROR: $cmd not found"
    return 1
  fi

  mkdir -p "$(direnv_layout_dir)"

  # Open pid_file on file descriptor 200
  exec 200>"$pid_file"

  # Check that we have exclusive access
  if ! flock --nonblock 200; then
    echo "daemonize[$cmd_string] is already running as pid $(< "$pid_file")"
    return
  fi

  # Start the process in the background. This requires two forks to escape the
  # control of bash.

  # First fork
  (
    # Second fork
    (

      # Record the PID for good measure
      echo "$BASHPID" >&200

      # Redirect standard file descriptors
      exec 0</dev/null
      exec 1>"$log_file"
      exec 2>&1
      # Used by direnv
      exec 3>&-
      exec 4>&-

      # Run command
      exec "$cmd" "$args"
    ) &
  ) &

  # Release that file descriptor
  exec 200>&-
}

use_rbw() {
  if ! has rbw; then
    cargo install --locked rbw
  fi

  RESULT="$(rbw get "${@:2}")"
	export $1="$RESULT"
}

export_function() {
  local name=$1
  local alias_dir=$PWD/.direnv/aliases
  mkdir -p "$alias_dir"
  PATH_add "$alias_dir"
  local target="$alias_dir/$name"
  if declare -f "$name" >/dev/null; then
    echo "#!$SHELL" > "$target"
    declare -f "$name" >> "$target" 2>/dev/null
    echo "$name \$*" >> "$target"
    chmod +x "$target"
  fi
}

export_alias() {
  local name=$1
  shift
  local alias_dir=$PWD/.direnv/aliases
  local target="$alias_dir/$name"
  local oldpath="$PATH"
  mkdir -p "$alias_dir"
  if ! [[ ":$PATH:" == *":$alias_dir:"* ]]; then
    PATH_add "$alias_dir"
  fi

  echo "#!/usr/bin/env bash" > "$target"
  echo "PATH=$oldpath" >> "$target"
  echo "$@" >> "$target"
  chmod +x "$target"
}
