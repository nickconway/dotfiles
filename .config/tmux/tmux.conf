# remap prefix from 'C-b' to 'C-Space'
unbind C-b
set-option -g prefix C-Space
bind C-Space send-prefix

bind Space switch-client -l

bind-key x kill-pane # skip "kill-pane 1? (y/n)" prompt
unbind d
bind d detach
bind C-p popup -b rounded -T Scratch -E "tmux new -As Scratch -c '#{pane_current_path}'"

set -g allow-passthrough on
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM

# Status bar
bind C-t set status

set -g status on
set -g status-interval 1
set -g status-justify left
set -g status-position top
set -g status-left-length 200
set -g status-right-length 200
set -g status-style 'fg=colour13'
set -g status-left ""
set -g status-right '#S #{?client_prefix,󰋘,󰋙} '
set -g window-size latest
setw -g aggressive-resize on

set -g message-style 'fg=colour13'

# Enable mouse mode (tmux 2.1 and above)
set -g mouse on

# don't rename windows automatically
set-option -g allow-rename off

set-option -g focus-events on

# increase scroll-back history
set -g history-limit 10000

# use vim key bindings
setw -g mode-keys vi

# decrease command delay (increases vim responsiveness)
setw -g escape-time 10

# increase repeat time for repeatable commands
set -g repeat-time 1000

# highlight window when it has new activity
setw -g monitor-activity off
set -g visual-activity off

# re-number windows when one is closed
set -g renumber-windows on
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1

# split panes using h and v
unbind '"'
unbind %

bind v split-window -c "#{pane_current_path}" -h
bind s split-window -c "#{pane_current_path}" -v
bind t split-window -c "#{pane_current_path}" -v \; resizep -y 25%
bind c new-window -c "#{pane_current_path}"

bind -n C-Left if-shell "$is_vim_or_ssh" "send-keys C-Left" "resize-pane -L 10"
bind -n C-Down if-shell "$is_vim_or_ssh" "send-keys C-Down" "resize-pane -D 10"
bind -n C-Up if-shell "$is_vim_or_ssh" "send-keys C-Up" "resize-pane -U 10"
bind -n C-Right if-shell "$is_vim_or_ssh" "send-keys C-Right" "resize-pane -R 10"

bind C-s choose-session

bind -T copy-mode-vi v 'if "[ #{rectangle_toggle} -eq 0 ]" "send-keys -X begin-selection" "send-keys -X begin-selection \; send-keys -X rectangle-toggle"'
bind -T copy-mode-vi C-v 'if "[ #{rectangle_toggle} -eq 1 ]" "send-keys -X begin-selection" "send-keys -X begin-selection \; send-keys -X rectangle-toggle"'

bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel\; run 'tmux-send-clipboard'
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel\; run 'tmux-send-clipboard'

# reload config file (change file location to your the tmux.conf you want to use)
bind r source-file ~/.config/tmux/tmux.conf

# Smart pane switching with awareness of Vim splits.
# From https://github.com/christoomey/vim-tmux-navigator
ps_grep="ps -o state= -o comm= --tty='#{pane_tty}' | grep -iqE"
is_vim_or_ssh="$ps_grep '^[^TXZ ]+ +(\\S+\\/)?g?(ssh|view|n?vim?x?)(diff)?$'"
is_ssh="$ps_grep '^[^TXZ ]+ +(\\S+\\/)?(ssh)$'"
is_s="test -f /tmp/tmux-#{pane_pid}"

bind -n M-Left if-shell "$is_vim_or_ssh" "send-keys M-Left" "select-pane -L"
bind -n M-Down if-shell "$is_vim_or_ssh" "send-keys M-Down" "select-pane -D"

bind -n M-Up if-shell "$is_vim_or_ssh" "send-keys M-Up" "select-pane -U"
bind -n M-Right if-shell "$is_vim_or_ssh" "send-keys M-Right" "select-pane -R"

bind -n C-/ if-shell "$is_vim_or_ssh" "send-keys C-/" "copy-mode"
bind -n C-_ if-shell "$is_vim_or_ssh" "send-keys C-_" "copy-mode"

bind -n C-f if-shell "$is_vim_or_ssh" "send-keys C-f" "run -b $HOME/.local/bin/tmux-sessionizer"

bind -n M-S-Right if-shell "$is_ssh" "send-keys M-S-Right" "next-window"
bind -n M-S-Left if-shell "$is_ssh" "send-keys M-S-Left" "previous-window"

bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

bind C-c new-session

unbind C-f
bind C-f command-prompt -p find-session 'switch-client -t %%'

# set-hook -g pane-exited           'if "[ #{session_windows} -lt 2 ]" "set status off"'
# set-hook -g after-kill-pane       'if "[ #{session_windows} -lt 2 ]" "set status off"'
# set-hook -g after-new-window      'if "[ #{session_windows} -gt 1 ]" "set status on"'
# set-hook -g window-layout-changed 'if "[ #{session_windows} -lt 2 ]" "set status off"'

set-hook -g pane-exited "if-shell \"$is_s\" 'set status off \; set prefix C-h \; bind C-h send-prefix' 'set status on \; set prefix C-Space \; bind C-Space send-prefix'"
set-hook -g after-kill-pane "if-shell \"$is_s\" 'set status off \; set prefix C-h \; bind C-h send-prefix' 'set status on \; set prefix C-Space \; bind C-Space send-prefix'"
set-hook -g window-pane-changed "if-shell \"$is_s\" 'set status off \; set prefix C-h \; bind C-h send-prefix' 'set status on \; set prefix C-Space \; bind C-Space send-prefix'"
set-hook -g session-window-changed "if-shell \"$is_s\" 'set status off \; set prefix C-h \; bind C-h send-prefix' 'set status on \; set prefix C-Space \; bind C-Space send-prefix'"
set-hook -g client-session-changed "if-shell \"$is_s\" 'set status off \; set prefix C-h \; bind C-h send-prefix' 'set status on \; set prefix C-Space \; bind C-Space send-prefix'"

set -g default-terminal "screen-256color"
set -ga terminal-overrides ",xterm-256color:Tc"

setw -g window-status-format " #[fg=colour5]#W #[fg=colour6]#(tmux-format #I hsquare) #[fg=colour4]#{?window_zoomed_flag,󰁌,#(tmux-format #P dsquare)}#{?window_activity_flag, 󱅫,}#{?window_bell_flag, 󰂞,}#{?window_silence_flag, 󰂛,}#{?window_active,,}#{?window_marked_flag,#[fg=colour4] 󰃀,}"
setw -g window-status-current-format " #[fg=colour13]#W #[fg=colour14]#(tmux-format #I fsquare) #[fg=colour12]#{?window_zoomed_flag,󰁌,#(tmux-format #P dsquare)}#{?window_activity_flag, 󱅫,}#{?window_bell_flag, 󰂞,}#{?window_silence_flag, 󰂛,}#{?window_active,,}#{?window_marked_flag,#[fg=colour12] 󰃀,}"

set -g pane-border-style fg=colour7
set -g pane-active-border-style fg=colour15

set -g popup-border-lines rounded
set -g popup-border-style fg=colour7

###########################
# Plugins
###########################
# To install plugins:
#   1) Add plugin down here
#   2) Prefix + I to install plugin
# To update plugins:
#   1) Prefix + U
# To remove plugins:
#   1) Remove line down here
#   2) Prefix + ALT + U
# If you're using iTerm2 on a Mac you may need to go to your Profiles,
# then keys and select that the `option` key should be treated as `Esc+`
# in order for the `Prefix + ALT + U` combination to work.

set -g @plugin 'joshmedeski/tmux-nerd-font-window-name'
set -g @plugin 'pschmitt/tmux-ssh-split'
set -g @plugin 'wfxr/tmux-fzf-url'
set -g @plugin 'tmux-plugins/tpm'

set -g @fzf-url-bind 'u'
set -g @fzf-url-history-limit '2000'
set -g @fzf-url-fzf-options '-w 50% -h 50% --multi -0 --no-preview'

set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-capture-pane-contents 'on'

set -g @continuum-boot 'on'
set -g @continuum-restore 'on'

set -g @tmux_power_theme 'snow'
set -g @tmux_power_theme '#5C6370'

set -g @ssh-split-h-key V
set -g @ssh-split-v-key S
set -g @ssh-split-w-key C
set -g @ssh-split-keep-cwd "true"
set -g @ssh-split-keep-remote-cwd "true"
set -g @ssh-split-fail "false"
set -g @ssh-split-no-env "false"
set -g @ssh-split-no-shell "false"
set -g @ssh-split-strip-cmd "true"
set -g @ssh-split-verbose "true"
set -g @ssh-split-debug "true"

if "test ! -d ~/.config/tmux/plugins/tpm" "run 'git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm && ~/.config/tmux/plugins/tpm/bin/install_plugins'"

run '~/.config/tmux/plugins/tpm/tpm'
