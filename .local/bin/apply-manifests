#!/bin/bash
set -euo pipefail

export GUM_INPUT_HEADER_FOREGROUND=${GUM_INPUT_HEADER_FOREGROUND:-9}
export GUM_INPUT_CURSOR_FOREGROUND=${GUM_INPUT_CURSOR_FOREGROUND:-11}

if [[ -n "${DEBUG_MODE:-}" ]]; then
    set -x
    export DEBUG_MODE
fi

cd "$K8S_MANIFEST_DIR"
if [[ -n "$(ls)" ]]; then
    for APP in *; do
        cd "$K8S_MANIFEST_DIR/$APP"
        if [[ -e .env ]]; then source .env; fi

        if [[ -e secrets.template ]]; then
            if [[ ! -e secrets.encrypted ]]; then
                if [[ -z "${GPG_KEY:-}" ]]; then
                    GPG_KEY="$(gpg --with-colons --list-keys "$GPG_EMAIL" | awk -F: '/^pub:.*/ { getline; print $10}')"
                    export GPG_KEY
                fi

                sed -nr 's/.*\$\{(.*)\}/\1/p' secrets.template | while read -r VAR_NAME; do
                    while [[ -z "${VALUE:-}" ]]; do
                        VALUE="$(gum input --header "Enter the value for $VAR_NAME:" --placeholder "${!VAR_NAME}")"
                        VALUE="${VALUE:-"${!VAR_NAME}"}"
                    done
                    eval 'echo "$VAR_NAME=$VALUE"'
                done

                sops encrypt --pgp "$GPG_KEY" <(envsubst < secrets.template) > secrets.encrypted
            fi
            SECRETS="$(sops decrypt --input-type yaml --output-type yaml secrets.encrypted --extract '["data"]')"
            kubectl apply -f <(echo "$SECRETS")
        fi

        if [[ -e .bootstrap ]]; then ./.bootstrap; fi

        for f in *.yml; do
            envsubst < "$f" | kubectl apply -f -
        done
    done
fi
