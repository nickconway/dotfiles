#!/bin/bash
set -euo pipefail

export GUM_INPUT_HEADER_FOREGROUND=${GUM_INPUT_HEADER_FOREGROUND:-9}
export GUM_INPUT_CURSOR_FOREGROUND=${GUM_INPUT_CURSOR_FOREGROUND:-11}

if [[ -n "${DEBUG_MODE:-}" ]]; then
    set -x
    export DEBUG_MODE
fi

cd "$K8S_MANIFEST_DIR"
if [[ -n "$(ls)" ]]; then
    for APP in *; do
        cd "$K8S_MANIFEST_DIR/$APP"
        if [[ -e .env ]]; then source .env; fi

        if [[ -e secrets.template ]]; then
            if [[ ! -e secrets.encrypted ]]; then
                if [[ -z "${GPG_KEY:-}" ]]; then
                    GPG_KEY="$(gpg --with-colons --list-keys "$GPG_EMAIL" | awk -F: '/^pub:.*/ { getline; print $10}')"
                    export GPG_KEY
                fi

                sed -nr 's/.*\$\{(.*)\}/\1/p' secrets.template | while read -r VAR_NAME; do
                    while [[ -z "${VALUE:-}" ]]; do
                        VALUE="$(gum input --header "Enter the value for $VAR_NAME:" --placeholder "${!VAR_NAME}")"
                        VALUE="${VALUE:-"${!VAR_NAME}"}"
                    done
                    eval 'echo "$VAR_NAME=$VALUE"'
                done

                sops encrypt --pgp "$GPG_KEY" <(envsubst < secrets.template) > secrets.encrypted
            fi
            SECRETS="$(sops decrypt --input-type yaml --output-type yaml secrets.encrypted --extract '["data"]')"
            kubectl apply -f <(echo "$SECRETS")
        fi

        if [[ "$APP" == "cert-manager" ]]; then
            if ! command -v helm &>/dev/null; then
                if [[ -n "${INSTALL_DEPENDENCIES:-}" ]] || gum confirm "Helm is not installed, would you like to install it?"; then
                    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                fi
            fi

            gum spin --title "Adding jetstack helm repo" -- helm repo add jetstack https://charts.jetstack.io --force-update
            echo "Jetstack helm repo added"

            if ! helm list -n cert-manager | grep cert-manager; then
                gum spin --title "Installing cert-manager" -- \
                    helm install \
                    cert-manager jetstack/cert-manager \
                    --namespace cert-manager \
                    --create-namespace \
                    --set crds.enabled=true \
                    --set 'extraArgs={--dns01-recursive-nameservers-only,--dns01-recursive-nameservers=1.1.1.1:53\,1.0.0.1:53}'
                echo "cert-manager helm chart installed"
            fi

            if ! kubectl -n cert-manager describe deploy cert-manager | grep -q dns01; then
                echo "Recursive nameservers were not set up correctly, exiting..."
                exit 1
            fi
        elif [[ "$APP" == "metallb" ]]; then
            LATEST_METALLB="$(curl -s https://api.github.com/repos/metallb/metallb/releases/latest | jq -r '.tag_name')"
            kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/"$LATEST_METALLB"/config/manifests/metallb-native.yaml
        elif [[ "$APP" == "traefik" ]]; then
            helm install traefik traefik/traefik
        fi

        for f in *.yml; do
            envsubst < "$f" | kubectl apply -f -
        done
    done
fi
