#!/bin/bash
set -euo pipefail
set -x

docker ps --format {{.Names}} | grep "${1:-}" | grep -v nextcloud-aio | while read c; do
    if docker exec "$c" bash -c 'which psql && [[ -n $POSTGRES_USER ]]' &>/dev/null; then
        echo "Dumping postgres container $c" \
            && docker exec "$c" bash -c 'pg_dump -c --if-exists --username "$POSTGRES_USER" -d "$POSTGRES_DB"' \
            > "$(docker inspect "$c" | jq -r '.[].Config.Labels["com.docker.compose.project.working_dir"]')/dump.sql"
        fi

    if docker exec "$c" bash -c '[[ -e /usr/bin/mysqldump ]] && [[ -n $MYSQL_USER ]]' &>/dev/null; then
        echo "Dumping mysql container $c" \
            && docker exec "$c" bash -c '/usr/bin/mysqldump -u "$MYSQL_USER" --password="$MYSQL_PASSWORD" "$MYSQL_DATABASE" --no-tablespaces' \
            > "$(docker inspect "$c" | jq -r '.[].Config.Labels["com.docker.compose.project.working_dir"]')/dump.sql"
    fi

    if docker exec "$c" bash -c 'which mariadb-dump && [[ -n $MARIADB_USER ]]' &>/dev/null; then
        echo "Dumping mariadb container $c" \
            && docker exec "$c" bash -c 'mariadb-dump -u"$MARIADB_USER" -p"$MARIADB_PASSWORD" --all-databases' \
            > "$(docker inspect "$c" | jq -r '.[].Config.Labels["com.docker.compose.project.working_dir"]')/dump.sql"
    fi

    if docker exec "$c" bash -c 'which mongodump' &>/dev/null; then
        echo "Dumping mongo container $c" \
            && docker exec "$c" mongodump --archive \
            > "$(docker inspect "$c" | jq -r '.[].Config.Labels["com.docker.compose.project.working_dir"]')/mongo.dumb"
    fi
done
